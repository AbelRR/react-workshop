  "disable": {
    "prefix": "disable",
    "body": [
      "// eslint-disable-next-line"
    ]
  },
  "ignore (same as disable)": {
    "prefix": "ignore",
    "body": [
      "// eslint-disable-next-line"
    ]
  },
  "console.log": {
    "prefix": "con",
    "body": [
      "console.log($0)"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "const { $1 } = $0"
    ]
  },
  "function": {
    "prefix": "f",
    "body": [
      "function $0() {",
      "  ",
      "}"
    ]
  },
  "getElementById('root')": {
    "prefix": "el",
    "body": [
      "document.getElementById('root')"
    ]
  },
  "ReactDOM": {
    "prefix": "ReactDOM",
    "body": [
      "ReactDOM.render(<${0:App} />, document.getElementById('root'))"
    ]
  },
  "useState": {
    "prefix": "state",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($0)"
    ]
  },
  "useEffect": {
    "prefix": "effect",
    "body": [
      "useEffect(() => {",
      "  ${0}",
      "}, [])"
    ]
  },
  "React.createElement": {
    "prefix": "create",
    "body": [
      "React.createElement($1, null, $0)"
    ]
  },
  "_jsx": {
    "prefix": "jsx",
    "body": [
      "_jsx($0, null)"
    ]
  },
  "reducer -> useReducer": {
    "prefix": "reducer",
    "body": [
      "const [state, dispatch] = useReducer((state, action) => {",
      "  switch(action.type) {",
      "    case '${0}': {",
      "      return { ...state }",
      "    }",
      "    default: return state",
      "  }",
      "}, {})"
    ],
    "description": "reducer -> useReducer"
  },
  "dispatch": {
    "prefix": "dispatch",
    "body": [
      "dispatch({ type: '${0}' })"
    ]
  },
  // "Provider": {
  // 	"prefix": "provider",
  // 	"body": [
  // 		"<${1}.Provider value={${2}}>${0}</${1}.Provider>"
  // 	]
  // },
  "React: Class Component": {
    "prefix": "class",
    "body": [
      "class $0 extends React.Component {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div></div>",
      "    )",
      "  }",
      "}"
    ]
  },
  "React: Class Component with Export": {
    "prefix": "React",
    "body": [
      "import React from 'react'",
      "",
      "class $0 extends React.Component {",
      "  constructor(props) {",
      "    super(props)",
      "    this.state = {",
      "    }",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div></div>",
      "    )",
      "  }",
      "}",
      "",
      "export default $0"
    ]
  },
  "React: Functional Component": {
    "prefix": "react",
    "body": [
      "import React from 'react'",
      "",
      "function $1() {",
      "  return (",
      "    $0",
      "  )",
      "}",
      "",
      "export default $1"
    ]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "  $1",
      "}"
    ]
  },
  "componentDidUpdate": {
    "prefix": "cdu",
    "body": [
      "componentDidUpdate(prevProps) {",
      "  $0",
      "}"
    ]
  },
  "componentWillUnmount": {
    "prefix": "cwu",
    "body": [
      "componentWillUnmount() {",
      "  $0",
      "}"
    ]
  },
  "Emotion (CSS)": {
    "prefix": "emotion",
    "body": [
      "import { css } from '@emotion/core'",
      "import theme from 'shared/styles/theme'",
      "const ${1}Styles = css`",
      "  ${0}",
      "`"
    ]
  },